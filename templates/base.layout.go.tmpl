{{define "base"}}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fort Smyth Bed and Breakfast</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker-bs5.min.css">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
    <link rel="stylesheet" href="/static/css/style.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Fort Smyth</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">Rooms</a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/generals-quarters">General's Quarters</a></li>
                            <li><a class="dropdown-item" href="/majors-suite">Major's Suite</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/search-availability">Book Now</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

{{block "content" .}}{{end}}




    <footer class="my-footer mt-5">
        <hr class="my-4">
        <div class="text-center">
            <p>&copy; 2024 Fort Smyth Bed and Breakfast. All rights reserved.</p>
        </div>
    </footer>

    <!-- Bootstrap Bundle with Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    {{block "js" .}}{{end}}
    <script>
        let attention = Prompt();
        (() => {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }

                form.classList.add('was-validated')
                }, false)
            })
        })()

        function Notify(msg, msgType) {
            notie.alert({
            type: msgType, // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
            text: msg,
            // stay: Boolean, // optional, default = false
            // time: Number, // optional, default = 3, minimum = 1,
            // position: String // optional, default = 'top', enum: ['top', 'bottom']
            })
        }
        function notifyModal(title, text, icon, confirmationButtonText) {
            Swal.fire({
            title: title,
            html: text,
            icon: icon,
            confirmButtonText: confirmationButtonText
            })
        }

        {{with .Error}}
            Notify("{{.}}", "error")
        {{end}}

        {{with .Flash}}
        Notify("{{.}}", "success")
        {{end}}

        {{with .Warning}}
        Notify("{{.}}", "warning")
        {{end}}


        function Prompt() {
            let toast = function (c) {
                const {
                    msg = "",
                    icon = "success",
                    position = "top-end",
                    
                } = c;
                const Toast = Swal.mixin({
                toast: true,
                title: msg,
                position: position,
                icon: icon,
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.onmouseenter = Swal.stopTimer;
                    toast.onmouseleave = Swal.resumeTimer;
                }
                });
                Toast.fire({});
            }
            let success = function (c) {
                const {
                    msg = "",
                    title = "",
                    footer = "",
                    
                } = c;
                Swal.fire({
                icon: "success",
                title: title,
                text: msg,
                footer: footer,
                });
            }
            let error = function (c) {
                const {
                    msg = "",
                    title = "",
                    footer = "",
                    
                } = c;
                Swal.fire({
                icon: "error",
                title: title,
                text: msg,
                footer: footer,
                });
            }

            async function custom(c) {
                const {
                    msg = "",
                    title = "",
                } = c;

                const { value: result } = await Swal.fire({
                    title: title,
                    html: msg,
                    backdrop: false,
                    focusConfirm: false,
                    showCancelButton: true,
                    //  willOpen: () => {
                    //         const elem = document.getElementById("reservation-dates-modal");
                    //         const rp = new DateRangePicker(elem, {
                    //             format: 'yyyy-mm-dd',
                    //             showOnFocus: true,
                    //         })
                    //     }, 
                    willOpen: () => {
                        if (c.willOpen !== undefined) {
                         c.willOpen();
                        }
                    },
                    didOpen: () => {
                        if (c.didOpen !== undefined) {
                            c.didOpen();
                        }
                    },
                    preConfirm: () => {
                        return [
                        document.querySelector("#reservation-dates-modal #start").value,
                        document.querySelector("#reservation-dates-modal #end").value
                        ]
                    }
                });

                    if (result) {
                            if (result.dismiss !== Swal.DismissReason.cancel) {
                                if (result.value !== "") {
                                    if (c.callback !== undefined) {
                                        c.callback(result);
                                    }
                                } else {
                                    c.callback(false);
                                }
                            } else {
                                c.callback(false);
                            }
                        }
                }
                    return {
                        toast :toast,
                        success:success,
                        error: error,
                        custom:custom,
                    }
        }
        
    </script>
</body>
</html>
{{end}}
